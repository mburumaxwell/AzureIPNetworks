trigger:
  batch: true
  branches:
    include:
      - refs/tags/*
  paths:
    exclude: # no need to rebuild on changes in documentation
      - README.md
      - LICENSE.md
      - RELEASENOTES.md
      - CHANGELOG.md

pr:
  branches:
    include:
      - master
  paths:
    exclude: # no need to rebuild on changes in documentation
      - README.md
      - LICENSE.md
      - RELEASENOTES.md
      - CHANGELOG.md

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'

    variables:
      solution: '**/*.sln'
      buildConfiguration: 'Release'
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

    steps:
    - task: GitVersion@5
      displayName: GitVersion

    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet'

    - task: NuGetCommand@2
      displayName: 'Nuget restore'
      inputs:
        restoreSolution: '$(solution)'

    - task: UseDotNet@1
      displayName: 'Ensure .NET 5 SDK'
      inputs:
        packageType: sdk
        version: 5.x

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        command: test
        projects: '**/*[Tt]ests*.csproj'
        arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet pack'
      inputs:
        command: pack
        nobuild: true
        versioningScheme: byEnvVar
        versionEnvVar: 'GITVERSION_NUGETVERSION'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        pathtoPublish: '$(build.artifactstagingdirectory)'
        artifactName: 'drop'
      condition: succeededOrFailed() # always run

- stage: Release
  dependsOn: Build
  condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
  jobs:
    - deployment: NugetOrg
      environment: NugetOrg
      pool:
        vmImage: 'ubuntu-latest'

      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: drop

            - task: NuGetCommand@2
              displayName: 'NuGet push'
              inputs:
                command: push
                packagesToPush: '$(Pipeline.Workspace)/drop/**/*.nupkg'
                nuGetFeedType: 'external'
                publishFeedCredentials: '$(feedCredentials)'
